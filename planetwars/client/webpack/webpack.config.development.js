/* eslint-disable max-len */
/**
 * Build config for development process that uses Hot-Module-Replacement
 * https://webpack.github.io/docs/hot-module-replacement-with-webpack.html
 */

const webpack = require('webpack');
const merge = require('webpack-merge');
const path = require('path');

const HardSourceWebpackPlugin = require('hard-source-webpack-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');

const baseConfig = require('./webpack.config.base');
const { APP_FOLDER, DIST_FOLDER } = require('./path_config');

const port = process.env.PORT || 3000;

module.exports = merge(baseConfig, {
  devtool: 'inline-source-map',
  mode: 'development',
  entry: [
    'react-hot-loader/patch',
    './app/render_process'
  ],
  output: {
    filename: 'bundle.js',
    path: DIST_FOLDER,
    publicPath: `http://localhost:${port}/dist/`,

    // https://github.com/webpack/webpack/issues/1114
    libraryTarget: 'commonjs2',
  },

  module: {
    rules: [
      {
        test: /\.tsx?$/,
        loaders: ['react-hot-loader/webpack', 'ts-loader'],
        exclude: /node_modules/
      },
      // Compile all .global.scss files and pipe it to style.css as is
      {
        test: /\.global\.scss$/,
        use: ['style-loader', 'css-loader?sourceMap', 'sass-loader']
      },
      // Compile all other .scss files and pipe it to style.css
      {
        test: /^((?!\.global).)*\.scss$/,
        use: [
          'style-loader',
          {
            loader: 'typings-for-css-modules-loader',
            options: {
              modules: true,
              sourceMap: true,
              importLoaders: 1,
              namedExport: true,
              banner: "// This file is automatically generated by typings-for-css-modules.\n// Please do not change this file!",
              localIdentName: '[name]__[local]__[hash:base64:5]',
            }
          },
          'sass-loader',
        ]
      },
    ]
  },

  // https://webpack.js.org/guides/caching/
  optimization: {
    runtimeChunk: 'single',
    splitChunks: {
      cacheGroups: {
        vendor: {
          test: /[\\/]node_modules[\\/]/,
          name: 'vendors',
          chunks: 'all'
        }
      }
    }
  },

  plugins: [
    // https://webpack.github.io/docs/hot-module-replacement-with-webpack.html
    // new webpack.HotModuleReplacementPlugin(),

    // https://github.com/mzgoddard/hard-source-webpack-plugin
    new HardSourceWebpackPlugin(),

    new HtmlWebpackPlugin({
      template: path.resolve(APP_FOLDER, 'index.development.html'),
      inject: true,
    }),

    new webpack.NoEmitOnErrorsPlugin(),

    new webpack.LoaderOptionsPlugin({
      debug: true
    }),
  ],

  // https://github.com/chentsulin/webpack-target-electron-renderer#how-this-module-works
  target: 'electron-renderer'
});