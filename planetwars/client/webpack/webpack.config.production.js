/**
 * Build config for electron 'Renderer Process' file
 */

const webpack = require('webpack');
const merge = require('webpack-merge');
const path = require('path');

const MiniCssExtractPlugin = require("mini-css-extract-plugin");
const HtmlWebpackPlugin = require('html-webpack-plugin');

const baseConfig = require('./webpack.config.base');
const { DIST_FOLDER, APP_FOLDER } = require('./path_config');

module.exports = merge(baseConfig, {
  devtool: 'cheap-module-source-map',

  mode: 'production',

  output: {
    path: DIST_FOLDER,
    filename: 'bundle.js',
    publicPath: '.',

    // https://github.com/webpack/webpack/issues/1114
    libraryTarget: 'commonjs2',
  },

  entry: [
    './app/render_process'
  ],

  module: {
    rules: [
      {
        test: /\.tsx?$/,
        loaders: ['ts-loader'],
        exclude: /node_modules/
      },
      // Compile all .global.scss files and pipe it to style.css as is
      {
        test: /\.global\.scss$/,
        use: [
          MiniCssExtractPlugin.loader,
          'css-loader?sourceMap',
          'sass-loader'
        ]
      },
      // Compile all other .scss files and pipe it to style.css
      {
        test: /^((?!\.global).)*\.scss$/,
        use: [
          MiniCssExtractPlugin.loader,
          {
            loader: 'typings-for-css-modules-loader',
            options: {
              modules: true,
              sourceMap: true,
              importLoaders: 1,
              namedExport: true,
              banner: "// This file is automatically generated by typings-for-css-modules.\n// Please do not change this file!",
              localIdentName: '[name]__[local]__[hash:base64:5]',
            }
          },
          'sass-loader',
        ]
      },
    ]
  },

  plugins: [
    // https://webpack.github.io/docs/list-of-plugins.html#occurrenceorderplugin
    // https://github.com/webpack/webpack/issues/864
    new webpack.optimize.OccurrenceOrderPlugin(),

    new HtmlWebpackPlugin({
      template: path.resolve(APP_FOLDER, 'index.production.html'),
      inject: true,
    }),


    new HtmlWebpackPlugin({
      template: path.resolve(APP_FOLDER, 'index.production.html'),
      inject: true,
    }),

    new MiniCssExtractPlugin({
      // Options similar to the same options in webpackOptions.output
      // both options are optional
      filename: '[name].[hash].css',
      chunkFilename: '[id].[hash].css',
    })
  ],

  // https://github.com/chentsulin/webpack-target-electron-renderer#how-this-module-works
  target: 'electron-renderer'
});